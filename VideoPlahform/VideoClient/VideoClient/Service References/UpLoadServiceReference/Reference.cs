//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace VideoClient.UpLoadServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://video.pandawork.net/upload/", ConfigurationName="UpLoadServiceReference.UpLoadService")]
    public interface UpLoadService {
        
        // CODEGEN: 消息 FileUploadMessage 的包装名称(FileUploadMessage)以后生成的消息协定与默认值(UploadFile)不匹配
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://video.pandawork.net/upload/UpLoadService/UploadFile")]
        void UploadFile(VideoClient.UpLoadServiceReference.FileUploadMessage request);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, AsyncPattern=true, Action="http://video.pandawork.net/upload/UpLoadService/UploadFile")]
        System.IAsyncResult BeginUploadFile(VideoClient.UpLoadServiceReference.FileUploadMessage request, System.AsyncCallback callback, object asyncState);
        
        void EndUploadFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://video.pandawork.net/upload/UpLoadService/GetUploadFileInfo", ReplyAction="http://video.pandawork.net/upload/UpLoadService/GetUploadFileInfoResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        object[] GetUploadFileInfo(string id);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://video.pandawork.net/upload/UpLoadService/GetUploadFileInfo", ReplyAction="http://video.pandawork.net/upload/UpLoadService/GetUploadFileInfoResponse")]
        System.IAsyncResult BeginGetUploadFileInfo(string id, System.AsyncCallback callback, object asyncState);
        
        object[] EndGetUploadFileInfo(System.IAsyncResult result);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="FileUploadMessage", WrapperNamespace="http://video.pandawork.net/upload/", IsWrapped=true)]
    public partial class FileUploadMessage {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://video.pandawork.net/upload/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://video.pandawork.net/upload/")]
        public int FileSize;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://video.pandawork.net/upload/")]
        public string FileUniqueID;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://video.pandawork.net/upload/")]
        public string SavePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://video.pandawork.net/upload/", Order=0)]
        public System.IO.Stream FileData;
        
        public FileUploadMessage() {
        }
        
        public FileUploadMessage(string FileName, int FileSize, string FileUniqueID, string SavePath, System.IO.Stream FileData) {
            this.FileName = FileName;
            this.FileSize = FileSize;
            this.FileUniqueID = FileUniqueID;
            this.SavePath = SavePath;
            this.FileData = FileData;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface UpLoadServiceChannel : VideoClient.UpLoadServiceReference.UpLoadService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUploadFileInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUploadFileInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpLoadServiceClient : System.ServiceModel.ClientBase<VideoClient.UpLoadServiceReference.UpLoadService>, VideoClient.UpLoadServiceReference.UpLoadService {
        
        private BeginOperationDelegate onBeginUploadFileDelegate;
        
        private EndOperationDelegate onEndUploadFileDelegate;
        
        private System.Threading.SendOrPostCallback onUploadFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUploadFileInfoDelegate;
        
        private EndOperationDelegate onEndGetUploadFileInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetUploadFileInfoCompletedDelegate;
        
        public UpLoadServiceClient() {
        }
        
        public UpLoadServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UpLoadServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpLoadServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UpLoadServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UploadFileCompleted;
        
        public event System.EventHandler<GetUploadFileInfoCompletedEventArgs> GetUploadFileInfoCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void VideoClient.UpLoadServiceReference.UpLoadService.UploadFile(VideoClient.UpLoadServiceReference.FileUploadMessage request) {
            base.Channel.UploadFile(request);
        }
        
        public void UploadFile(string FileName, int FileSize, string FileUniqueID, string SavePath, System.IO.Stream FileData) {
            VideoClient.UpLoadServiceReference.FileUploadMessage inValue = new VideoClient.UpLoadServiceReference.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.FileSize = FileSize;
            inValue.FileUniqueID = FileUniqueID;
            inValue.SavePath = SavePath;
            inValue.FileData = FileData;
            ((VideoClient.UpLoadServiceReference.UpLoadService)(this)).UploadFile(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult VideoClient.UpLoadServiceReference.UpLoadService.BeginUploadFile(VideoClient.UpLoadServiceReference.FileUploadMessage request, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUploadFile(request, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUploadFile(string FileName, int FileSize, string FileUniqueID, string SavePath, System.IO.Stream FileData, System.AsyncCallback callback, object asyncState) {
            VideoClient.UpLoadServiceReference.FileUploadMessage inValue = new VideoClient.UpLoadServiceReference.FileUploadMessage();
            inValue.FileName = FileName;
            inValue.FileSize = FileSize;
            inValue.FileUniqueID = FileUniqueID;
            inValue.SavePath = SavePath;
            inValue.FileData = FileData;
            return ((VideoClient.UpLoadServiceReference.UpLoadService)(this)).BeginUploadFile(inValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUploadFile(System.IAsyncResult result) {
            base.Channel.EndUploadFile(result);
        }
        
        private System.IAsyncResult OnBeginUploadFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string FileName = ((string)(inValues[0]));
            int FileSize = ((int)(inValues[1]));
            string FileUniqueID = ((string)(inValues[2]));
            string SavePath = ((string)(inValues[3]));
            System.IO.Stream FileData = ((System.IO.Stream)(inValues[4]));
            return this.BeginUploadFile(FileName, FileSize, FileUniqueID, SavePath, FileData, callback, asyncState);
        }
        
        private object[] OnEndUploadFile(System.IAsyncResult result) {
            this.EndUploadFile(result);
            return null;
        }
        
        private void OnUploadFileCompleted(object state) {
            if ((this.UploadFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UploadFileCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UploadFileAsync(string FileName, int FileSize, string FileUniqueID, string SavePath, System.IO.Stream FileData) {
            this.UploadFileAsync(FileName, FileSize, FileUniqueID, SavePath, FileData, null);
        }
        
        public void UploadFileAsync(string FileName, int FileSize, string FileUniqueID, string SavePath, System.IO.Stream FileData, object userState) {
            if ((this.onBeginUploadFileDelegate == null)) {
                this.onBeginUploadFileDelegate = new BeginOperationDelegate(this.OnBeginUploadFile);
            }
            if ((this.onEndUploadFileDelegate == null)) {
                this.onEndUploadFileDelegate = new EndOperationDelegate(this.OnEndUploadFile);
            }
            if ((this.onUploadFileCompletedDelegate == null)) {
                this.onUploadFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUploadFileCompleted);
            }
            base.InvokeAsync(this.onBeginUploadFileDelegate, new object[] {
                        FileName,
                        FileSize,
                        FileUniqueID,
                        SavePath,
                        FileData}, this.onEndUploadFileDelegate, this.onUploadFileCompletedDelegate, userState);
        }
        
        public object[] GetUploadFileInfo(string id) {
            return base.Channel.GetUploadFileInfo(id);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUploadFileInfo(string id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUploadFileInfo(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object[] EndGetUploadFileInfo(System.IAsyncResult result) {
            return base.Channel.EndGetUploadFileInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetUploadFileInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string id = ((string)(inValues[0]));
            return this.BeginGetUploadFileInfo(id, callback, asyncState);
        }
        
        private object[] OnEndGetUploadFileInfo(System.IAsyncResult result) {
            object[] retVal = this.EndGetUploadFileInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUploadFileInfoCompleted(object state) {
            if ((this.GetUploadFileInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUploadFileInfoCompleted(this, new GetUploadFileInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUploadFileInfoAsync(string id) {
            this.GetUploadFileInfoAsync(id, null);
        }
        
        public void GetUploadFileInfoAsync(string id, object userState) {
            if ((this.onBeginGetUploadFileInfoDelegate == null)) {
                this.onBeginGetUploadFileInfoDelegate = new BeginOperationDelegate(this.OnBeginGetUploadFileInfo);
            }
            if ((this.onEndGetUploadFileInfoDelegate == null)) {
                this.onEndGetUploadFileInfoDelegate = new EndOperationDelegate(this.OnEndGetUploadFileInfo);
            }
            if ((this.onGetUploadFileInfoCompletedDelegate == null)) {
                this.onGetUploadFileInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUploadFileInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetUploadFileInfoDelegate, new object[] {
                        id}, this.onEndGetUploadFileInfoDelegate, this.onGetUploadFileInfoCompletedDelegate, userState);
        }
    }
}
